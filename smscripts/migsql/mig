#!/bin/bash

# File to store server details
SERVER_DETAILS_FILE="server_details.txt"

# Enable debugging
# set -x

# Function to read input with a prompt
read_input() {
    local prompt=$1
    local default_value=$2
    local input

    read -p "$prompt [$default_value]: " input
    echo "${input:-$default_value}"
}

# Function to save server details to a file
save_server_details() {
    local nickname=$1
    local server_user=$2
    local server_dns=$3

    echo "$nickname:$server_user:$server_dns" >> "$SERVER_DETAILS_FILE"
}

# Function to list server details
list_server_details() {
    if [[ -f $SERVER_DETAILS_FILE ]]; then
        nl -w 3 -s ': ' "$SERVER_DETAILS_FILE" | awk -F: '{print $1". "$2" - "$3":"$4}'
    else
        echo "No saved server details found."
    fi
}

# Function to edit server details
edit_server_details() {
    list_server_details
    echo ""

    read -p "Enter the number of the server to edit: " server_number
    server_details=$(sed "${server_number}q;d" "$SERVER_DETAILS_FILE")

    local nickname=$(echo "$server_details" | cut -d':' -f1)
    local server_user=$(echo "$server_details" | cut -d':' -f2)
    local server_dns=$(echo "$server_details" | cut -d':' -f3)

    nickname=$(read_input "Enter new nickname" "$nickname")
    server_user=$(read_input "Enter new server username" "$server_user")
    server_dns=$(read_input "Enter new server DNS" "$server_dns")

    sed -i "${server_number}d" "$SERVER_DETAILS_FILE"
    save_server_details "$nickname" "$server_user" "$server_dns"
}

# Function to delete server details
delete_server_details() {
    list_server_details
    echo ""

    read -p "Enter the number of the server to delete: " server_number
    sed -i "${server_number}d" "$SERVER_DETAILS_FILE"
}

# Function to prompt for server details
prompt_server_details() {
    local nickname=$(read_input "Enter nickname" "")
    local server_user=$(read_input "Enter server username" "")
    local server_dns=$(read_input "Enter server DNS" "")

    save_server_details "$nickname" "$server_user" "$server_dns"
}

# Main menu
main_menu() {
    echo "1. Add server details"
    echo "2. Edit server details"
    echo "3. Delete server details"
    echo "4. List server details"
    echo "5. Dump and transfer databases"
    echo "6. Exit"
    echo ""

    read -p "Enter your choice: " choice
    case $choice in
        1) prompt_server_details ;;
        2) edit_server_details ;;
        3) delete_server_details ;;
        4) list_server_details ;;
        5) dump_and_transfer_databases ;;
        6) exit 0 ;;
        *) echo "Invalid choice"; main_menu ;;
    esac
}

# Function to list databases for a user
list_databases() {
    local db_user=$1
    local db_password=$2

    echo "Testing connection with user: $db_user"
    echo "SHOW DATABASES;" | mysql -u "$db_user" -p"$db_password" -s --skip-column-names 2>error.log
    
    if [[ -s error.log ]]; then
        echo "Error listing databases:"
        cat error.log
    else
        echo "Databases listed successfully."
    fi
}

# Function to prompt for database credentials and handle authentication errors
prompt_db_credentials() {
    local db_user
    local db_password

    while true; do
        db_user=$(read_input "Enter database user" "")
        read -s -p "Enter database password: " db_password
        echo ""

        # Trim any extra whitespace or newline characters
        db_user=$(echo "$db_user" | xargs)
        db_password=$(echo "$db_password" | xargs)
        # echo "aaah$db_user"
        # echo "eeeh$db_password"

        if list_databases "$db_user" "$db_password" >/dev/null 2>&1; then
            echo "$db_user:$db_password"
            break
        else
            echo "Access denied for user '$db_user'. Please try again."
        fi
    done
}


# Function to dump and transfer databases
dump_and_transfer_databases() {
    local db_users=()
    local db_user db_password selected_databases

    while true; do
        credentials=$(prompt_db_credentials)
        db_user=$(echo "$credentials" | cut -d':' -f1)
        db_password=$(echo "$credentials" | cut -d':' -f2)
        
        echo "Listing databases for user $db_user"
        databases=$(list_databases "$db_user" "$db_password")
        if [[ -z "$databases" ]]; then
            echo "No databases found or unable to list databases."
            continue
        fi
        echo "$databases"
        echo ""

        read -p "Enter databases to backup (space-separated by names): " -a selected_databases_names

        echo "Selected databases: ${selected_databases_names[*]}"

        db_users+=("$db_user:$db_password:${selected_databases_names[*]}")

        more_users=$(read_input "Do you want to add another database user? (y/n)" "n")
        [[ "$more_users" != "y" ]] && break
    done

    echo ""
    read -p "Do you want to upload to a server or multiple servers? (s/m): " upload_option

    if [[ "$upload_option" == "s" ]]; then
        list_server_details
        read -p "Enter the number of the server to use: " server_number
        server_details=$(sed "${server_number}q;d" "$SERVER_DETAILS_FILE")
        server_user=$(echo "$server_details" | cut -d':' -f2)
        server_dns=$(echo "$server_details" | cut -d':' -f3)

        for user in "${db_users[@]}"; do
            db_user=$(echo "$user" | cut -d':' -f1)
            
            db_password=$(echo "$user" | cut -d':' -f2)
            selected_databases=$(echo "$user" | cut -d':' -f3-)

            for db_name in $selected_databases; do
                echo "Dumping database $db_name..."
                mysqldump -u "$db_user" -p"$db_password" --opt "$db_name" > "${db_name}.sql"

                echo "Uploading ${db_name}.sql to $server_user@$server_dns..."
                scp "${db_name}.sql" "${server_user}@${server_dns}:"
            done
        done

    elif [[ "$upload_option" == "m" ]]; then
        selected_servers=()
        while true; do
            list_server_details
            read -p "Enter the number of the server to use: " server_number
            selected_servers+=("$server_number")

            more_servers=$(read_input "Do you want to add another server? (yes/no)" "no")
            [[ "$more_servers" != "yes" ]] && break
        done

        for server_number in "${selected_servers[@]}"; do
            server_details=$(sed "${server_number}q;d" "$SERVER_DETAILS_FILE")
            server_user=$(echo "$server_details" | cut -d':' -f2)
            server_dns=$(echo "$server_details" | cut -d':' -f3)

            for user in "${db_users[@]}"; do
                db_user=$(echo "$user" | cut -d':' -f1)
                db_password=$(echo "$user" | cut -d':' -f2)
                selected_databases=$(echo "$user" | cut -d':' -f3-)
                for db_name in $selected_databases; do
                    echo "Dumping database $db_name..."
                    mysqldump -u "$db_user" -p"$db_password" --opt "$db_name" > "${db_name}.sql"

                    echo "Uploading ${db_name}.sql to $server_user@$server_dns..."
                    scp "${db_name}.sql" "${server_user}@${server_dns}:"
                done
            done
        done
    fi

    echo "Database dump and transfer complete."
}

# Main script logic
main() {
    while true; do
        main_menu
        echo ""
    done
}

main "$@"
